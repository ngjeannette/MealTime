{"version":3,"sources":["Espresso-Lungo.mp4","Map.js","Yelp.js","ShowTime.js","About.js","timezones.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Coordinate","_ref","text","react_default","a","createElement","style","color","background","padding","display","font-size","textAlign","alignItems","justifyContent","borderRadius","transform","SimpleMap","Fragment","className","height","width","lib_default","bootstrapURLKeys","key","center","this","props","defaultZoom","zoom","Map_Coordinate","lat","lng","index_es","icon","faUtensils","React","Component","defaultProps","Yelp","state","selectedCategory","handleChangeSelectCategory","event","_this","setState","target","value","_this2","selection","length","faFilter","size","onChange","id","concat","Object","toConsumableArray","reduce","categories","business","forEach","category","includes","title","push","sort","map","categoryTitle","filter","item","src","image_url","alt","alias","name","location","address1","city","zip_code","country","Map","coordinates","latitude","longitude","ShowTime","timeStamp","time","About","faLocationArrow","class","faChevronDown","onClick","scroll","data","timezone","Date","toLocaleString","timeZone","hour12","weekday","month","day","hour","minute","error","acc","curr","currContinent","substring","indexOf","currCity","America","Asia","Australia","Europe","getSuggestionValue","suggestion","renderSuggestion","replace","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","continent","selectedContinent","citySearch","suggestions","getSuggestions","inputValue","trim","toLowerCase","inputLength","slice","onSuggestionsFetchRequested","onSuggestionsClearRequested","handleChange","_ref2","newValue","handleChangeSelect","handleSubmit","e","preventDefault","getSelectionfromApi","getTime","x","yy","match","yyy","Number","meal","axios","get","headers","Authorization","params","then","res","businesses","getCoordinates","searchResultsRef","current","scrollIntoView","block","behavior","console","log","catch","err","y","searchPage","createRef","_this$state","inputProps","placeholder","muted","autoPlay","loop","video","About_About","ref","action","keys","dist_default","shouldRenderSuggestions","type","disabled","ShowTime_ShowTime","Yelp_Yelp","lats","Boolean","window","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sUCMlCC,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACjBC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,MAAO,QACPC,WAAY,MACZC,QAAS,OACTC,QAAS,cACTC,YAAa,OACbC,UAAW,SACXC,WAAY,SACZC,eAAgB,SAChBC,aAAc,OACdC,UAAW,0BAGZd,IAICe,mLAKF,OACEd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,WAAWb,MAAO,CAAEc,OAAQ,QAASC,MAAO,SACzDlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,iBAAkB,CAChBC,IAAK,2CAEPC,OAAQC,KAAKC,MAAMF,OACnBG,YAAaF,KAAKC,MAAME,MAExB1B,EAAAC,EAAAC,cAACyB,EAAD,CACEC,IAAKL,KAAKC,MAAMI,IAChBC,IAAKN,KAAKC,MAAMK,IAChB9B,KAAKC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAiBC,KAAMC,kBAlBlBC,IAAMC,WAAxBpB,EACGqB,aAAe,CACpBT,KAAM,IAwBKZ,QCzCMsB,6MACnBC,MAAQ,CACNC,iBAAkB,SAGpBC,2BAA6B,SAAAC,GAC3BC,EAAKC,SAAS,CAAEJ,iBAAkBE,EAAMG,OAAOC,iFAExC,IAAAC,EAAAtB,KACP,OACEA,KAAKC,MAAMsB,UAAUC,OAAS,GAC5B/C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,oBACbhB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAiBC,KAAMiB,IAAUC,KAAK,KAAK7C,MAAM,UACjDJ,EAAAC,EAAAC,cAAA,UACEgD,SAAU3B,KAAKgB,2BACfK,MAAOrB,KAAKc,MAAMC,iBAClBtB,UAAU,gCACVmC,GAAG,mBAEF,CACC,OADDC,OAAAC,OAAAC,EAAA,EAAAD,CAEI9B,KAAKC,MAAMsB,UACXS,OAAO,SAACC,EAAYC,GAOnB,OANAA,EAASD,WAAWE,QAAQ,SAAAC,GACrBH,EAAWI,SAASD,EAASE,QAChCL,EAAWM,KAAKH,EAASE,SAItBL,GACN,IACFO,SACHC,IAAI,SAAAC,GAEJ,OACEjE,EAAAC,EAAAC,cAAA,UACE0C,MAAOqB,EACPjD,UAAU,6BAETiD,OAMXjE,EAAAC,EAAAC,cAAA,MAAIiD,GAAG,iBACJ5B,KAAKC,MAAMsB,UACToB,OACC,SAAAC,GAAI,MAC8B,QAAhCtB,EAAKR,MAAMC,kBACX6B,EAAKX,WACFQ,IAAI,SAAAL,GAAQ,OAAIA,EAASE,QACzBD,SAASf,EAAKR,MAAMC,oBAE1B0B,IAAI,SAAAG,GACH,OACEnE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aAAaK,IAAK8C,EAAKhB,IACpCnD,EAAAC,EAAAC,cAAA,OAAKc,UAAU,sCACbhB,EAAAC,EAAAC,cAAA,OAAKkE,IAAKD,EAAKE,UAAWC,IAAKH,EAAKI,QACpCvE,EAAAC,EAAAC,cAAA,OAAKc,UAAU,eACbhB,EAAAC,EAAAC,cAAA,cAAMiE,EAAKK,KAAX,KADF,yBAAApB,OAGFe,EAAKM,SAASC,SAHZ,0BAAAtB,OAIFe,EAAKM,SAASE,KAJZ,0BAAAvB,OAKFe,EAAKM,SAASpC,MALZ,0BAAAe,OAMFe,EAAKM,SAASG,SANZ,0BAAAxB,OAOFe,EAAKM,SAASI,UAEZ7E,EAAAC,EAAAC,cAAC4E,EAAD,CACElD,IAAKuC,EAAKY,YAAYC,SACtBnD,IAAKsC,EAAKY,YAAYE,UACtB3D,OAAQ,CACNM,IAAKuC,EAAKY,YAAYC,SACtBnD,IAAKsC,EAAKY,YAAYE,WAExBN,KAAMR,EAAKM,SAASE,qBA7EZ1C,IAAMC,WCPnBgD,mLAEjB,OACE3D,KAAKC,MAAMmD,KAAK5B,OAAS,GACvB/C,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACbhB,EAAAC,EAAAC,cAAA,UACGqB,KAAKC,MAAMmD,KADd,KACsBpD,KAAKC,MAAM2D,WAEjCnF,EAAAC,EAAAC,cAAA,kBAAUqB,KAAKC,MAAM4D,KAArB,kBAR4BnD,IAAMC,WCIvBmD,mLAEjB,OACErF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACbhB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,UACbhB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAiBC,KAAMuD,IAAiBrC,KAAK,KAAK7C,MAAM,aAE1DJ,EAAAC,EAAAC,cAAA,OAAKqF,MAAM,OACXvF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,UACbhB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAiBC,KAAMC,IAAYiB,KAAK,KAAK7C,MAAM,cAGvDJ,EAAAC,EAAAC,cAAA,OAAKc,UAAU,mBACbhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,UACbhB,EAAAC,EAAAC,cAAA,yIAIAF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEC,KAAMyD,IACNvC,KAAK,KACL7C,MAAM,UACNqF,QAASlE,KAAKC,MAAMkE,mBA1BCzD,IAAMC,4BC6hCnCyD,GApiCM,CACV,mBACA,iBACA,eACA,qBACA,iBACA,gBACA,gBACA,gBACA,gBACA,gBACA,kBACA,qBACA,mBACA,eACA,oBACA,eACA,iBACA,eACA,uBACA,kBACA,gBACA,kBACA,kBACA,kBACA,gBACA,sBACA,cACA,iBACA,kBACA,gBACA,kBACA,eACA,oBACA,cACA,gBACA,oBACA,gBACA,gBACA,gBACA,gBACA,iBACA,mBACA,kBACA,iBACA,kBACA,gBACA,oBACA,qBACA,oBACA,kBACA,kBACA,iBACA,eACA,kBACA,eACA,oBACA,mBACA,kBACA,oBACA,iCACA,8BACA,mCACA,4BACA,0BACA,6BACA,4BACA,iCACA,0BACA,6BACA,6BACA,4BACA,4BACA,gBACA,mBACA,mBACA,eACA,gBACA,yBACA,mBACA,gBACA,iBACA,uBACA,oBACA,iBACA,gBACA,uBACA,wBACA,uBACA,iBACA,kBACA,oBACA,kBACA,iBACA,kBACA,oBACA,wBACA,kBACA,qBACA,kBACA,iBACA,kBACA,uBACA,iBACA,uBACA,iBACA,kBACA,mBACA,mBACA,mBACA,sBACA,mBACA,sBACA,qBACA,oBACA,oBACA,kBACA,oBACA,qBACA,kBACA,qBACA,oBACA,oBACA,iBACA,kBACA,iBACA,qBACA,+BACA,uBACA,0BACA,6BACA,4BACA,wBACA,4BACA,0BACA,uBACA,iBACA,kBACA,kBACA,gBACA,iBACA,8BACA,8BACA,kBACA,qBACA,iBACA,eACA,sBACA,qBACA,wBACA,iBACA,kBACA,iBACA,kBACA,qBACA,oBACA,mBACA,kBACA,oBACA,iBACA,qBACA,sBACA,mBACA,kBACA,oBACA,qBACA,mBACA,qBACA,iBACA,mBACA,kBACA,eACA,kBACA,8BACA,8BACA,iCACA,kBACA,iBACA,sBACA,qBACA,kBACA,wBACA,yBACA,qBACA,sBACA,sBACA,uBACA,sBACA,uBACA,iBACA,iBACA,mBACA,qBACA,kBACA,uBACA,mBACA,mBACA,wBACA,oBACA,uBACA,mBACA,gBACA,wBACA,mBACA,mBACA,mBACA,oBACA,qBACA,wBACA,sBACA,gBACA,sBACA,kBACA,kBACA,kBACA,oBACA,iBACA,qBACA,mBACA,kBACA,sBACA,mBACA,mBACA,4BACA,uBACA,oBACA,qBACA,oBACA,qBACA,wBACA,mBACA,mBACA,oBACA,YACA,cACA,aACA,cACA,aACA,cACA,gBACA,iBACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,eACA,cACA,gBACA,aACA,kBACA,iBACA,iBACA,eACA,aACA,gBACA,aACA,YACA,aACA,gBACA,iBACA,YACA,cACA,cACA,mBACA,iBACA,YACA,eACA,gBACA,eACA,gBACA,iBACA,aACA,iBACA,eACA,eACA,iBACA,gBACA,gBACA,eACA,mBACA,oBACA,eACA,cACA,aACA,aACA,eACA,gBACA,cACA,cACA,oBACA,mBACA,YACA,YACA,kBACA,iBACA,iBACA,aACA,iBACA,eACA,cACA,cACA,gBACA,iBACA,aACA,gBACA,iBACA,qBACA,cACA,gBACA,eACA,cACA,gBACA,cACA,eACA,aACA,aACA,qBACA,mBACA,kBACA,cACA,gBACA,iBACA,mBACA,eACA,cACA,qBACA,eACA,kBACA,mBACA,kBACA,sBACA,kBACA,iBACA,qBACA,mBACA,qBACA,yBACA,qBACA,mBACA,gBACA,qBACA,qBACA,wBACA,qBACA,mBACA,mBACA,kBACA,mBACA,gBACA,qBACA,sBACA,sBACA,kBACA,gBACA,kBACA,uBACA,kBACA,mBACA,qBACA,qBACA,iBACA,uBACA,cACA,mBACA,cACA,cACA,kBACA,iBACA,iBACA,kBACA,sBACA,iBACA,sBACA,eACA,MACA,oBACA,qBACA,UACA,OACA,MACA,QACA,OACA,MACA,UACA,UACA,YACA,YACA,aACA,aACA,aACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,aACA,aACA,aACA,aACA,aACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,gBACA,UACA,gBACA,UACA,WACA,mBACA,iBACA,mBACA,gBACA,iBACA,kBACA,gBACA,oBACA,kBACA,mBACA,kBACA,kBACA,kBACA,oBACA,gBACA,mBACA,kBACA,kBACA,qBACA,kBACA,gBACA,qBACA,cACA,eACA,gBACA,mBACA,gBACA,oBACA,gBACA,eACA,mBACA,eACA,gBACA,gBACA,eACA,cACA,eACA,mBACA,gBACA,cACA,cACA,gBACA,oBACA,kBACA,iBACA,oBACA,gBACA,eACA,mBACA,iBACA,gBACA,kBACA,mBACA,kBACA,eACA,iBACA,gBACA,iBACA,mBACA,gBACA,gBACA,oBACA,gBACA,KACA,UACA,MACA,QACA,OACA,aACA,YACA,WACA,MACA,UACA,sBACA,gBACA,mBACA,eACA,gBACA,mBACA,cACA,kBACA,mBACA,iBACA,iBACA,OACA,SACA,UACA,QACA,YACA,QACA,MACA,mBACA,iBACA,iBACA,MACA,UACA,SACA,KACA,UACA,eACA,mBACA,uBACA,kBACA,gBACA,iBACA,gBACA,oBACA,kBACA,eACA,mBACA,oBACA,kBACA,sBACA,eACA,mBACA,mBACA,qBACA,iBACA,oBACA,iBACA,oBACA,iBACA,gBACA,eACA,kBACA,iBACA,oBACA,gBACA,mBACA,kBACA,iBACA,uBACA,oBACA,iBACA,gBACA,iBACA,iBACA,oBACA,eACA,eACA,iBACA,cACA,SACA,WACA,MACA,UACA,MACA,MACA,YACA,SACA,MACA,YACA,YACA,cACA,aACA,aACA,aACA,kBACA,YACA,oBACA,cACA,cACA,aACA,iBACA,WACA,MACA,MACA,OACA,QAubCzB,OAAO,SAAAyB,GAAI,OAAIA,EAAK/B,SAAS,OAC7BM,OAAO,SAAA0B,GACN,KACE,IAAIC,MAAOC,eAAe,QAAS,CACjCC,SAAUH,EACVI,QAAQ,EACRC,QAAS,OACTC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YAEV,MAAOC,GAEP,OAAO,EAET,OAAO,IAGsB/C,OAAO,SAACgD,EAAKC,GAC5C,IAAMC,EAAgBD,EAAKE,UAAU,EAAGF,EAAKG,QAAQ,MAC/CC,EAAWJ,EAAKE,UAAUF,EAAKG,QAAQ,KAAO,GAOpD,OANKJ,EAAIE,KACPF,EAAIE,GAAiB,IAElBF,EAAIE,GAAe7C,SAASgD,IAC/BL,EAAIE,GAAe3C,KAAK8C,GAEnBL,GACN,IAEU,CACXM,QAAS,CACP,OACA,YACA,WACA,YACA,yBACA,sBACA,oBACA,kBACA,qBACA,oBACA,yBACA,kBACA,qBACA,qBACA,oBACA,oBACA,WACA,WACA,OACA,QACA,iBACA,WACA,QACA,eACA,YACA,SACA,QACA,eACA,gBACA,eACA,SACA,UACA,YACA,UACA,UACA,YACA,gBACA,UACA,aACA,UACA,SACA,SACA,eACA,SACA,UACA,WACA,WACA,cACA,WACA,cACA,aACA,YACA,YACA,UACA,YACA,aACA,aACA,YACA,YACA,UACA,SACA,aACA,uBACA,eACA,kBACA,qBACA,oBACA,gBACA,oBACA,kBACA,eACA,SACA,UACA,UACA,QACA,SACA,sBACA,sBACA,SACA,OACA,cACA,aACA,gBACA,SACA,SACA,aACA,YACA,WACA,UACA,YACA,SACA,aACA,cACA,WACA,UACA,YACA,aACA,WACA,aACA,SACA,WACA,UACA,OACA,UACA,sBACA,sBACA,yBACA,UACA,SACA,cACA,UACA,aACA,cACA,cACA,eACA,cACA,eACA,SACA,SACA,WACA,aACA,UACA,eACA,WACA,WACA,gBACA,YACA,eACA,WACA,gBACA,WACA,WACA,WACA,YACA,aACA,QACA,cACA,UACA,UACA,YACA,SACA,aACA,WACA,eAEFC,KAAM,CACJ,YACA,WACA,eACA,QACA,QACA,SACA,YACA,SACA,SAEFC,UAAW,CAAC,WAAY,WAAY,YAAa,QAAS,UAE1DC,OAAQ,CACN,YACA,SACA,UACA,WACA,SACA,WACA,WACA,WACA,aACA,SACA,YACA,WACA,WACA,WACA,SACA,SACA,SACA,aACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,SACA,OACA,aACA,YACA,UACA,SACA,YC/qCEC,EAAqB,SAAAC,GAAU,OAAIA,GAEnCC,EAAmB,SAAAD,GAAU,OACjClH,EAAAC,EAAAC,cAAA,eAAOgH,EAAWE,QAAQ,MAAO,KAAjC,MAGmBC,cA+CnB,SAAAA,EAAY7F,GAAO,IAAAiB,EAAA,OAAAY,OAAAiE,EAAA,EAAAjE,CAAA9B,KAAA8F,IACjB5E,EAAAY,OAAAkE,EAAA,EAAAlE,CAAA9B,KAAA8B,OAAAmE,EAAA,EAAAnE,CAAAgE,GAAAI,KAAAlG,KAAMC,KA/CRa,MAAQ,CACNqF,UAAW,UACXC,kBAAmB,UACnBhD,KAAM,GACNiD,WAAY,GACZjC,OACAkC,YAAalC,EAAI,QACjB7C,UAAW,GACXlB,IAAK,GACLC,IAAK,GACLP,OAAQ,CACNM,IAAK,GACLC,IAAK,IAEP2B,WAAY,GACZ4B,KAAM,GACND,UAAW,IA8BM1C,EA3BnBqF,eAAiB,SAAAlF,GACf,IAAMmF,EAAanF,EAAMoF,OAAOC,cAC1BC,EAAcH,EAAWhF,OAC/B,OAAuB,IAAhBmF,EACHzF,EAAKJ,MAAMsD,KAA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","file":"static/js/main.b53539e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Espresso-Lungo.aab78f87.mp4\";","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUtensils } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\n\nconst Coordinate = ({ text }) => (\n  <div\n    style={{\n      color: \"white\",\n      background: \"red\",\n      padding: \"10px\",\n      display: \"inline-flex\",\n      \"font-size\": \"1rem\",\n      textAlign: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderRadius: \"100%\",\n      transform: \"translate(-50%, -50%)\"\n    }}\n  >\n    {text}\n  </div>\n);\n\nclass SimpleMap extends React.Component {\n  static defaultProps = {\n    zoom: 15\n  };\n  render() {\n    return (\n      <>\n        <div className=\"mapImage\" style={{ height: \"200px\", width: \"100%\" }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: \"AIzaSyBhxC0ajIe4Q3ZZHvPrycvvT0a4dGzl7hY\"\n            }}\n            center={this.props.center}\n            defaultZoom={this.props.zoom}\n          >\n            <Coordinate\n              lat={this.props.lat}\n              lng={this.props.lng}\n              text=<FontAwesomeIcon icon={faUtensils} />\n            />\n          </GoogleMapReact>\n        </div>\n      </>\n    );\n  }\n}\nexport default SimpleMap;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport SimpleMap from \"./Map\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons\";\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nexport default class Yelp extends React.Component {\n  state = {\n    selectedCategory: \"All\"\n  };\n\n  handleChangeSelectCategory = event => {\n    this.setState({ selectedCategory: event.target.value });\n  };\n  render() {\n    return (\n      this.props.selection.length > 0 && (\n        <>\n          <div className=\"container select\">\n            <FontAwesomeIcon icon={faFilter} size=\"2x\" color=\"black\" />\n            <select\n              onChange={this.handleChangeSelectCategory}\n              value={this.state.selectedCategory}\n              className=\"react-autosuggest__container \"\n              id=\"filterSelection\"\n            >\n              {[\n                \"All\",\n                ...this.props.selection\n                  .reduce((categories, business) => {\n                    business.categories.forEach(category => {\n                      if (!categories.includes(category.title)) {\n                        categories.push(category.title);\n                      }\n                    });\n\n                    return categories;\n                  }, [])\n                  .sort()\n              ].map(categoryTitle => {\n                //each category is place inside an option\n                return (\n                  <option\n                    value={categoryTitle}\n                    className=\"react-autosuggest__input \"\n                  >\n                    {categoryTitle}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n          <ul id=\"searchResults\">\n            {this.props.selection\n              .filter(\n                item =>\n                  this.state.selectedCategory === \"All\" ||\n                  item.categories\n                    .map(category => category.title)\n                    .includes(this.state.selectedCategory)\n              )\n              .map(item => {\n                return (\n                  <li>\n                    <div className=\"selections\" key={item.id}>\n                      <div className=\"container restaurant bg-light mb-3\">\n                        <img src={item.image_url} alt={item.alias} />\n                        <div className=\"information\">\n                          <h4> {item.name} </h4>\n                          {`\n                    ${item.location.address1}\n                    ${item.location.city}\n                    ${item.location.state}\n                    ${item.location.zip_code}\n                    ${item.location.country}`}\n                        </div>\n                        <SimpleMap\n                          lat={item.coordinates.latitude}\n                          lng={item.coordinates.longitude}\n                          center={{\n                            lat: item.coordinates.latitude,\n                            lng: item.coordinates.longitude\n                          }}\n                          city={item.location.city}\n                        />\n                      </div>\n                    </div>\n                  </li>\n                );\n              })}\n          </ul>\n        </>\n      )\n    );\n  }\n}\n","import \"./App.css\";\nimport React, { Component } from \"react\";\n\nexport default class ShowTime extends React.Component {\n  render() {\n    return (\n      this.props.city.length > 0 && (\n        <div className=\" showTime\">\n          <h3>\n            {this.props.city}: {this.props.timeStamp}\n          </h3>\n          <h3>It's {this.props.time} time!</h3>\n        </div>\n      )\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUtensils,\n  faLocationArrow,\n  faChevronDown\n} from \"@fortawesome/free-solid-svg-icons\";\nexport default class About extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h2> About </h2>\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <h3> Select Location </h3>\n            <FontAwesomeIcon icon={faLocationArrow} size=\"5x\" color=\"#f09878\" />\n          </div>\n          <div class=\"vl\" />\n          <div className=\"col-sm\">\n            <h3> Find your meal </h3>\n            <FontAwesomeIcon icon={faUtensils} size=\"5x\" color=\"#f09878\" />\n          </div>\n        </div>\n        <div className=\"row description\">\n          <div className=\"col-sm\">\n            <h3>\n              Based on the location, MealTime finds the current local time and\n              suggests nearby restaurants for the appropriate meal time.\n            </h3>\n            <FontAwesomeIcon\n              icon={faChevronDown}\n              size=\"5x\"\n              color=\"#f09878\"\n              onClick={this.props.scroll}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","const all = [\n  \"TZ database name\",\n  \"Africa/Abidjan\",\n  \"Africa/Accra\",\n  \"Africa/Addis_Ababa\",\n  \"Africa/Algiers\",\n  \"Africa/Asmara\",\n  \"Africa/Bamako\",\n  \"Africa/Bangui\",\n  \"Africa/Banjul\",\n  \"Africa/Bissau\",\n  \"Africa/Blantyre\",\n  \"Africa/Brazzaville\",\n  \"Africa/Bujumbura\",\n  \"Africa/Cairo\",\n  \"Africa/Casablanca\",\n  \"Africa/Ceuta\",\n  \"Africa/Conakry\",\n  \"Africa/Dakar\",\n  \"Africa/Dar_es_Salaam\",\n  \"Africa/Djibouti\",\n  \"Africa/Douala\",\n  \"Africa/El_Aaiun\",\n  \"Africa/Freetown\",\n  \"Africa/Gaborone\",\n  \"Africa/Harare\",\n  \"Africa/Johannesburg\",\n  \"Africa/Juba\",\n  \"Africa/Kampala\",\n  \"Africa/Khartoum\",\n  \"Africa/Kigali\",\n  \"Africa/Kinshasa\",\n  \"Africa/Lagos\",\n  \"Africa/Libreville\",\n  \"Africa/Lome\",\n  \"Africa/Luanda\",\n  \"Africa/Lubumbashi\",\n  \"Africa/Lusaka\",\n  \"Africa/Malabo\",\n  \"Africa/Maputo\",\n  \"Africa/Maseru\",\n  \"Africa/Mbabane\",\n  \"Africa/Mogadishu\",\n  \"Africa/Monrovia\",\n  \"Africa/Nairobi\",\n  \"Africa/Ndjamena\",\n  \"Africa/Niamey\",\n  \"Africa/Nouakchott\",\n  \"Africa/Ouagadougou\",\n  \"Africa/Porto-Novo\",\n  \"Africa/Sao_Tome\",\n  \"Africa/Timbuktu\",\n  \"Africa/Tripoli\",\n  \"Africa/Tunis\",\n  \"Africa/Windhoek\",\n  \"America/Adak\",\n  \"America/Anchorage\",\n  \"America/Anguilla\",\n  \"America/Antigua\",\n  \"America/Araguaina\",\n  \"America/Argentina/Buenos_Aires\",\n  \"America/Argentina/Catamarca\",\n  \"America/Argentina/ComodRivadavia\",\n  \"America/Argentina/Cordoba\",\n  \"America/Argentina/Jujuy\",\n  \"America/Argentina/La_Rioja\",\n  \"America/Argentina/Mendoza\",\n  \"America/Argentina/Rio_Gallegos\",\n  \"America/Argentina/Salta\",\n  \"America/Argentina/San_Juan\",\n  \"America/Argentina/San_Luis\",\n  \"America/Argentina/Tucuman\",\n  \"America/Argentina/Ushuaia\",\n  \"America/Aruba\",\n  \"America/Asuncion\",\n  \"America/Atikokan\",\n  \"America/Atka\",\n  \"America/Bahia\",\n  \"America/Bahia_Banderas\",\n  \"America/Barbados\",\n  \"America/Belem\",\n  \"America/Belize\",\n  \"America/Blanc-Sablon\",\n  \"America/Boa_Vista\",\n  \"America/Bogota\",\n  \"America/Boise\",\n  \"America/Buenos_Aires\",\n  \"America/Cambridge_Bay\",\n  \"America/Campo_Grande\",\n  \"America/Cancun\",\n  \"America/Caracas\",\n  \"America/Catamarca\",\n  \"America/Cayenne\",\n  \"America/Cayman\",\n  \"America/Chicago\",\n  \"America/Chihuahua\",\n  \"America/Coral_Harbour\",\n  \"America/Cordoba\",\n  \"America/Costa_Rica\",\n  \"America/Creston\",\n  \"America/Cuiaba\",\n  \"America/Curacao\",\n  \"America/Danmarkshavn\",\n  \"America/Dawson\",\n  \"America/Dawson_Creek\",\n  \"America/Denver\",\n  \"America/Detroit\",\n  \"America/Dominica\",\n  \"America/Edmonton\",\n  \"America/Eirunepe\",\n  \"America/El_Salvador\",\n  \"America/Ensenada\",\n  \"America/Fort_Nelson\",\n  \"America/Fort_Wayne\",\n  \"America/Fortaleza\",\n  \"America/Glace_Bay\",\n  \"America/Godthab\",\n  \"America/Goose_Bay\",\n  \"America/Grand_Turk\",\n  \"America/Grenada\",\n  \"America/Guadeloupe\",\n  \"America/Guatemala\",\n  \"America/Guayaquil\",\n  \"America/Guyana\",\n  \"America/Halifax\",\n  \"America/Havana\",\n  \"America/Hermosillo\",\n  \"America/Indiana/Indianapolis\",\n  \"America/Indiana/Knox\",\n  \"America/Indiana/Marengo\",\n  \"America/Indiana/Petersburg\",\n  \"America/Indiana/Tell_City\",\n  \"America/Indiana/Vevay\",\n  \"America/Indiana/Vincennes\",\n  \"America/Indiana/Winamac\",\n  \"America/Indianapolis\",\n  \"America/Inuvik\",\n  \"America/Iqaluit\",\n  \"America/Jamaica\",\n  \"America/Jujuy\",\n  \"America/Juneau\",\n  \"America/Kentucky/Louisville\",\n  \"America/Kentucky/Monticello\",\n  \"America/Knox_IN\",\n  \"America/Kralendijk\",\n  \"America/La_Paz\",\n  \"America/Lima\",\n  \"America/Los_Angeles\",\n  \"America/Louisville\",\n  \"America/Lower_Princes\",\n  \"America/Maceio\",\n  \"America/Managua\",\n  \"America/Manaus\",\n  \"America/Marigot\",\n  \"America/Martinique\",\n  \"America/Matamoros\",\n  \"America/Mazatlan\",\n  \"America/Mendoza\",\n  \"America/Menominee\",\n  \"America/Merida\",\n  \"America/Metlakatla\",\n  \"America/Mexico_City\",\n  \"America/Miquelon\",\n  \"America/Moncton\",\n  \"America/Monterrey\",\n  \"America/Montevideo\",\n  \"America/Montreal\",\n  \"America/Montserrat\",\n  \"America/Nassau\",\n  \"America/New_York\",\n  \"America/Nipigon\",\n  \"America/Nome\",\n  \"America/Noronha\",\n  \"America/North_Dakota/Beulah\",\n  \"America/North_Dakota/Center\",\n  \"America/North_Dakota/New_Salem\",\n  \"America/Ojinaga\",\n  \"America/Panama\",\n  \"America/Pangnirtung\",\n  \"America/Paramaribo\",\n  \"America/Phoenix\",\n  \"America/Port_of_Spain\",\n  \"America/Port-au-Prince\",\n  \"America/Porto_Acre\",\n  \"America/Porto_Velho\",\n  \"America/Puerto_Rico\",\n  \"America/Punta_Arenas\",\n  \"America/Rainy_River\",\n  \"America/Rankin_Inlet\",\n  \"America/Recife\",\n  \"America/Regina\",\n  \"America/Resolute\",\n  \"America/Rio_Branco\",\n  \"America/Rosario\",\n  \"America/Santa_Isabel\",\n  \"America/Santarem\",\n  \"America/Santiago\",\n  \"America/Santo_Domingo\",\n  \"America/Sao_Paulo\",\n  \"America/Scoresbysund\",\n  \"America/Shiprock\",\n  \"America/Sitka\",\n  \"America/St_Barthelemy\",\n  \"America/St_Johns\",\n  \"America/St_Kitts\",\n  \"America/St_Lucia\",\n  \"America/St_Thomas\",\n  \"America/St_Vincent\",\n  \"America/Swift_Current\",\n  \"America/Tegucigalpa\",\n  \"America/Thule\",\n  \"America/Thunder_Bay\",\n  \"America/Tijuana\",\n  \"America/Toronto\",\n  \"America/Tortola\",\n  \"America/Vancouver\",\n  \"America/Virgin\",\n  \"America/Whitehorse\",\n  \"America/Winnipeg\",\n  \"America/Yakutat\",\n  \"America/Yellowknife\",\n  \"Antarctica/Casey\",\n  \"Antarctica/Davis\",\n  \"Antarctica/DumontDUrville\",\n  \"Antarctica/Macquarie\",\n  \"Antarctica/Mawson\",\n  \"Antarctica/McMurdo\",\n  \"Antarctica/Palmer\",\n  \"Antarctica/Rothera\",\n  \"Antarctica/South_Pole\",\n  \"Antarctica/Syowa\",\n  \"Antarctica/Troll\",\n  \"Antarctica/Vostok\",\n  \"Asia/Aden\",\n  \"Asia/Almaty\",\n  \"Asia/Amman\",\n  \"Asia/Anadyr\",\n  \"Asia/Aqtau\",\n  \"Asia/Aqtobe\",\n  \"Asia/Ashgabat\",\n  \"Asia/Ashkhabad\",\n  \"Asia/Atyrau\",\n  \"Asia/Baghdad\",\n  \"Asia/Bahrain\",\n  \"Asia/Baku\",\n  \"Asia/Bangkok\",\n  \"Asia/Barnaul\",\n  \"Asia/Beirut\",\n  \"Asia/Bishkek\",\n  \"Asia/Brunei\",\n  \"Asia/Calcutta\",\n  \"Asia/Chita\",\n  \"Asia/Choibalsan\",\n  \"Asia/Chongqing\",\n  \"Asia/Chungking\",\n  \"Asia/Colombo\",\n  \"Asia/Dacca\",\n  \"Asia/Damascus\",\n  \"Asia/Dhaka\",\n  \"Asia/Dili\",\n  \"Asia/Dubai\",\n  \"Asia/Dushanbe\",\n  \"Asia/Famagusta\",\n  \"Asia/Gaza\",\n  \"Asia/Harbin\",\n  \"Asia/Hebron\",\n  \"Asia/Ho_Chi_Minh\",\n  \"Asia/Hong_Kong\",\n  \"Asia/Hovd\",\n  \"Asia/Irkutsk\",\n  \"Asia/Istanbul\",\n  \"Asia/Jakarta\",\n  \"Asia/Jayapura\",\n  \"Asia/Jerusalem\",\n  \"Asia/Kabul\",\n  \"Asia/Kamchatka\",\n  \"Asia/Karachi\",\n  \"Asia/Kashgar\",\n  \"Asia/Kathmandu\",\n  \"Asia/Katmandu\",\n  \"Asia/Khandyga\",\n  \"Asia/Kolkata\",\n  \"Asia/Krasnoyarsk\",\n  \"Asia/Kuala_Lumpur\",\n  \"Asia/Kuching\",\n  \"Asia/Kuwait\",\n  \"Asia/Macao\",\n  \"Asia/Macau\",\n  \"Asia/Magadan\",\n  \"Asia/Makassar\",\n  \"Asia/Manila\",\n  \"Asia/Muscat\",\n  \"Asia/Novokuznetsk\",\n  \"Asia/Novosibirsk\",\n  \"Asia/Omsk\",\n  \"Asia/Oral\",\n  \"Asia/Phnom_Penh\",\n  \"Asia/Pontianak\",\n  \"Asia/Pyongyang\",\n  \"Asia/Qatar\",\n  \"Asia/Qyzylorda\",\n  \"Asia/Rangoon\",\n  \"Asia/Riyadh\",\n  \"Asia/Saigon\",\n  \"Asia/Sakhalin\",\n  \"Asia/Samarkand\",\n  \"Asia/Seoul\",\n  \"Asia/Shanghai\",\n  \"Asia/Singapore\",\n  \"Asia/Srednekolymsk\",\n  \"Asia/Taipei\",\n  \"Asia/Tashkent\",\n  \"Asia/Tbilisi\",\n  \"Asia/Tehran\",\n  \"Asia/Tel_Aviv\",\n  \"Asia/Thimbu\",\n  \"Asia/Thimphu\",\n  \"Asia/Tokyo\",\n  \"Asia/Tomsk\",\n  \"Asia/Ujung_Pandang\",\n  \"Asia/Ulaanbaatar\",\n  \"Asia/Ulan_Bator\",\n  \"Asia/Urumqi\",\n  \"Asia/Ust-Nera\",\n  \"Asia/Vientiane\",\n  \"Asia/Vladivostok\",\n  \"Asia/Yakutsk\",\n  \"Asia/Yangon\",\n  \"Asia/Yekaterinburg\",\n  \"Asia/Yerevan\",\n  \"Atlantic/Azores\",\n  \"Atlantic/Bermuda\",\n  \"Atlantic/Canary\",\n  \"Atlantic/Cape_Verde\",\n  \"Atlantic/Faeroe\",\n  \"Atlantic/Faroe\",\n  \"Atlantic/Jan_Mayen\",\n  \"Atlantic/Madeira\",\n  \"Atlantic/Reykjavik\",\n  \"Atlantic/South_Georgia\",\n  \"Atlantic/St_Helena\",\n  \"Atlantic/Stanley\",\n  \"Australia/ACT\",\n  \"Australia/Adelaide\",\n  \"Australia/Brisbane\",\n  \"Australia/Broken_Hill\",\n  \"Australia/Canberra\",\n  \"Australia/Currie\",\n  \"Australia/Darwin\",\n  \"Australia/Eucla\",\n  \"Australia/Hobart\",\n  \"Australia/LHI\",\n  \"Australia/Lindeman\",\n  \"Australia/Lord_Howe\",\n  \"Australia/Melbourne\",\n  \"Australia/North\",\n  \"Australia/NSW\",\n  \"Australia/Perth\",\n  \"Australia/Queensland\",\n  \"Australia/South\",\n  \"Australia/Sydney\",\n  \"Australia/Tasmania\",\n  \"Australia/Victoria\",\n  \"Australia/West\",\n  \"Australia/Yancowinna\",\n  \"Brazil/Acre\",\n  \"Brazil/DeNoronha\",\n  \"Brazil/East\",\n  \"Brazil/West\",\n  \"Canada/Atlantic\",\n  \"Canada/Central\",\n  \"Canada/Eastern\",\n  \"Canada/Mountain\",\n  \"Canada/Newfoundland\",\n  \"Canada/Pacific\",\n  \"Canada/Saskatchewan\",\n  \"Canada/Yukon\",\n  \"CET\",\n  \"Chile/Continental\",\n  \"Chile/EasterIsland\",\n  \"CST6CDT\",\n  \"Cuba\",\n  \"EET\",\n  \"Egypt\",\n  \"Eire\",\n  \"EST\",\n  \"EST5EDT\",\n  \"Etc/GMT\",\n  \"Etc/GMT+0\",\n  \"Etc/GMT+1\",\n  \"Etc/GMT+10\",\n  \"Etc/GMT+11\",\n  \"Etc/GMT+12\",\n  \"Etc/GMT+2\",\n  \"Etc/GMT+3\",\n  \"Etc/GMT+4\",\n  \"Etc/GMT+5\",\n  \"Etc/GMT+6\",\n  \"Etc/GMT+7\",\n  \"Etc/GMT+8\",\n  \"Etc/GMT+9\",\n  \"Etc/GMT0\",\n  \"Etc/GMT-0\",\n  \"Etc/GMT-1\",\n  \"Etc/GMT-10\",\n  \"Etc/GMT-11\",\n  \"Etc/GMT-12\",\n  \"Etc/GMT-13\",\n  \"Etc/GMT-14\",\n  \"Etc/GMT-2\",\n  \"Etc/GMT-3\",\n  \"Etc/GMT-4\",\n  \"Etc/GMT-5\",\n  \"Etc/GMT-6\",\n  \"Etc/GMT-7\",\n  \"Etc/GMT-8\",\n  \"Etc/GMT-9\",\n  \"Etc/Greenwich\",\n  \"Etc/UCT\",\n  \"Etc/Universal\",\n  \"Etc/UTC\",\n  \"Etc/Zulu\",\n  \"Europe/Amsterdam\",\n  \"Europe/Andorra\",\n  \"Europe/Astrakhan\",\n  \"Europe/Athens\",\n  \"Europe/Belfast\",\n  \"Europe/Belgrade\",\n  \"Europe/Berlin\",\n  \"Europe/Bratislava\",\n  \"Europe/Brussels\",\n  \"Europe/Bucharest\",\n  \"Europe/Budapest\",\n  \"Europe/Busingen\",\n  \"Europe/Chisinau\",\n  \"Europe/Copenhagen\",\n  \"Europe/Dublin\",\n  \"Europe/Gibraltar\",\n  \"Europe/Guernsey\",\n  \"Europe/Helsinki\",\n  \"Europe/Isle_of_Man\",\n  \"Europe/Istanbul\",\n  \"Europe/Jersey\",\n  \"Europe/Kaliningrad\",\n  \"Europe/Kiev\",\n  \"Europe/Kirov\",\n  \"Europe/Lisbon\",\n  \"Europe/Ljubljana\",\n  \"Europe/London\",\n  \"Europe/Luxembourg\",\n  \"Europe/Madrid\",\n  \"Europe/Malta\",\n  \"Europe/Mariehamn\",\n  \"Europe/Minsk\",\n  \"Europe/Monaco\",\n  \"Europe/Moscow\",\n  \"Asia/Nicosia\",\n  \"Europe/Oslo\",\n  \"Europe/Paris\",\n  \"Europe/Podgorica\",\n  \"Europe/Prague\",\n  \"Europe/Riga\",\n  \"Europe/Rome\",\n  \"Europe/Samara\",\n  \"Europe/San_Marino\",\n  \"Europe/Sarajevo\",\n  \"Europe/Saratov\",\n  \"Europe/Simferopol\",\n  \"Europe/Skopje\",\n  \"Europe/Sofia\",\n  \"Europe/Stockholm\",\n  \"Europe/Tallinn\",\n  \"Europe/Tirane\",\n  \"Europe/Tiraspol\",\n  \"Europe/Ulyanovsk\",\n  \"Europe/Uzhgorod\",\n  \"Europe/Vaduz\",\n  \"Europe/Vatican\",\n  \"Europe/Vienna\",\n  \"Europe/Vilnius\",\n  \"Europe/Volgograd\",\n  \"Europe/Warsaw\",\n  \"Europe/Zagreb\",\n  \"Europe/Zaporozhye\",\n  \"Europe/Zurich\",\n  \"GB\",\n  \"GB-Eire\",\n  \"GMT\",\n  \"GMT+0\",\n  \"GMT0\",\n  \"GMT−0\",\n  \"Greenwich\",\n  \"Hongkong\",\n  \"HST\",\n  \"Iceland\",\n  \"Indian/Antananarivo\",\n  \"Indian/Chagos\",\n  \"Indian/Christmas\",\n  \"Indian/Cocos\",\n  \"Indian/Comoro\",\n  \"Indian/Kerguelen\",\n  \"Indian/Mahe\",\n  \"Indian/Maldives\",\n  \"Indian/Mauritius\",\n  \"Indian/Mayotte\",\n  \"Indian/Reunion\",\n  \"Iran\",\n  \"Israel\",\n  \"Jamaica\",\n  \"Japan\",\n  \"Kwajalein\",\n  \"Libya\",\n  \"MET\",\n  \"Mexico/BajaNorte\",\n  \"Mexico/BajaSur\",\n  \"Mexico/General\",\n  \"MST\",\n  \"MST7MDT\",\n  \"Navajo\",\n  \"NZ\",\n  \"NZ-CHAT\",\n  \"Pacific/Apia\",\n  \"Pacific/Auckland\",\n  \"Pacific/Bougainville\",\n  \"Pacific/Chatham\",\n  \"Pacific/Chuuk\",\n  \"Pacific/Easter\",\n  \"Pacific/Efate\",\n  \"Pacific/Enderbury\",\n  \"Pacific/Fakaofo\",\n  \"Pacific/Fiji\",\n  \"Pacific/Funafuti\",\n  \"Pacific/Galapagos\",\n  \"Pacific/Gambier\",\n  \"Pacific/Guadalcanal\",\n  \"Pacific/Guam\",\n  \"Pacific/Honolulu\",\n  \"Pacific/Johnston\",\n  \"Pacific/Kiritimati\",\n  \"Pacific/Kosrae\",\n  \"Pacific/Kwajalein\",\n  \"Pacific/Majuro\",\n  \"Pacific/Marquesas\",\n  \"Pacific/Midway\",\n  \"Pacific/Nauru\",\n  \"Pacific/Niue\",\n  \"Pacific/Norfolk\",\n  \"Pacific/Noumea\",\n  \"Pacific/Pago_Pago\",\n  \"Pacific/Palau\",\n  \"Pacific/Pitcairn\",\n  \"Pacific/Pohnpei\",\n  \"Pacific/Ponape\",\n  \"Pacific/Port_Moresby\",\n  \"Pacific/Rarotonga\",\n  \"Pacific/Saipan\",\n  \"Pacific/Samoa\",\n  \"Pacific/Tahiti\",\n  \"Pacific/Tarawa\",\n  \"Pacific/Tongatapu\",\n  \"Pacific/Truk\",\n  \"Pacific/Wake\",\n  \"Pacific/Wallis\",\n  \"Pacific/Yap\",\n  \"Poland\",\n  \"Portugal\",\n  \"PRC\",\n  \"PST8PDT\",\n  \"ROC\",\n  \"ROK\",\n  \"Singapore\",\n  \"Turkey\",\n  \"UCT\",\n  \"Universal\",\n  \"US/Alaska\",\n  \"US/Aleutian\",\n  \"US/Arizona\",\n  \"US/Central\",\n  \"US/Eastern\",\n  \"US/East-Indiana\",\n  \"US/Hawaii\",\n  \"US/Indiana-Starke\",\n  \"US/Michigan\",\n  \"US/Mountain\",\n  \"US/Pacific\",\n  \"US/Pacific-New\",\n  \"US/Samoa\",\n  \"UTC\",\n  \"WET\",\n  \"W-SU\",\n  \"Zulu\"\n];\n\nconst timezoneData = {\n  Africa: [\n    \"Abidjan\",\n    \"Accra\",\n    \"Addis_Ababa\",\n    \"Algiers\",\n    \"Asmara\",\n    \"Bamako\",\n    \"Bangui\",\n    \"Banjul\",\n    \"Bissau\",\n    \"Blantyre\",\n    \"Brazzaville\",\n    \"Bujumbura\",\n    \"Cairo\",\n    \"Casablanca\",\n    \"Ceuta\",\n    \"Conakry\",\n    \"Dakar\",\n    \"Dar_es_Salaam\",\n    \"Djibouti\",\n    \"Douala\",\n    \"El_Aaiun\",\n    \"Freetown\",\n    \"Gaborone\",\n    \"Harare\",\n    \"Johannesburg\",\n    \"Juba\",\n    \"Kampala\",\n    \"Khartoum\",\n    \"Kigali\",\n    \"Kinshasa\",\n    \"Lagos\",\n    \"Libreville\",\n    \"Lome\",\n    \"Luanda\",\n    \"Lubumbashi\",\n    \"Lusaka\",\n    \"Malabo\",\n    \"Maputo\",\n    \"Maseru\",\n    \"Mbabane\",\n    \"Mogadishu\",\n    \"Monrovia\",\n    \"Nairobi\",\n    \"Ndjamena\",\n    \"Niamey\",\n    \"Nouakchott\",\n    \"Ouagadougou\",\n    \"Porto-Novo\",\n    \"Sao_Tome\",\n    \"Timbuktu\",\n    \"Tripoli\",\n    \"Tunis\",\n    \"Windhoek\"\n  ],\n  America: [\n    \"Adak\",\n    \"Anchorage\",\n    \"Anguilla\",\n    \"Antigua\",\n    \"Araguaina\",\n    \"Argentina/Buenos_Aires\",\n    \"Argentina/Catamarca\",\n    \"Argentina/Cordoba\",\n    \"Argentina/Jujuy\",\n    \"Argentina/La_Rioja\",\n    \"Argentina/Mendoza\",\n    \"Argentina/Rio_Gallegos\",\n    \"Argentina/Salta\",\n    \"Argentina/San_Juan\",\n    \"Argentina/San_Luis\",\n    \"Argentina/Tucuman\",\n    \"Argentina/Ushuaia\",\n    \"Aruba\",\n    \"Asuncion\",\n    \"Atikokan\",\n    \"Atka\",\n    \"Bahia\",\n    \"Bahia_Banderas\",\n    \"Barbados\",\n    \"Belem\",\n    \"Belize\",\n    \"Blanc-Sablon\",\n    \"Boa_Vista\",\n    \"Bogota\",\n    \"Boise\",\n    \"Buenos_Aires\",\n    \"Cambridge_Bay\",\n    \"Campo_Grande\",\n    \"Cancun\",\n    \"Caracas\",\n    \"Catamarca\",\n    \"Cayenne\",\n    \"Cayman\",\n    \"Chicago\",\n    \"Chihuahua\",\n    \"Coral_Harbour\",\n    \"Cordoba\",\n    \"Costa_Rica\",\n    \"Creston\",\n    \"Cuiaba\",\n    \"Curacao\",\n    \"Danmarkshavn\",\n    \"Dawson\",\n    \"Dawson_Creek\",\n    \"Denver\",\n    \"Detroit\",\n    \"Dominica\",\n    \"Edmonton\",\n    \"Eirunepe\",\n    \"El_Salvador\",\n    \"Ensenada\",\n    \"Fort_Nelson\",\n    \"Fort_Wayne\",\n    \"Fortaleza\",\n    \"Glace_Bay\",\n    \"Godthab\",\n    \"Goose_Bay\",\n    \"Grand_Turk\",\n    \"Guadeloupe\",\n    \"Guatemala\",\n    \"Guayaquil\",\n    \"Guyana\",\n    \"Halifax\",\n    \"Havana\",\n    \"Hermosillo\",\n    \"Indiana/Indianapolis\",\n    \"Indiana/Knox\",\n    \"Indiana/Marengo\",\n    \"Indiana/Petersburg\",\n    \"Indiana/Tell_City\",\n    \"Indiana/Vevay\",\n    \"Indiana/Vincennes\",\n    \"Indiana/Winamac\",\n    \"Indianapolis\",\n    \"Inuvik\",\n    \"Iqaluit\",\n    \"Jamaica\",\n    \"Jujuy\",\n    \"Juneau\",\n    \"Kentucky/Louisville\",\n    \"Kentucky/Monticello\",\n    \"Kralendijk\",\n    \"La_Paz\",\n    \"Lima\",\n    \"Los_Angeles\",\n    \"Louisville\",\n    \"Lower_Princes\",\n    \"Maceio\",\n    \"Managua\",\n    \"Manaus\",\n    \"Marigot\",\n    \"Martinique\",\n    \"Matamoros\",\n    \"Mazatlan\",\n    \"Mendoza\",\n    \"Menominee\",\n    \"Merida\",\n    \"Metlakatla\",\n    \"Mexico_City\",\n    \"Miquelon\",\n    \"Moncton\",\n    \"Monterrey\",\n    \"Montevideo\",\n    \"Montreal\",\n    \"Montserrat\",\n    \"Nassau\",\n    \"New_York\",\n    \"Nipigon\",\n    \"Nome\",\n    \"Noronha\",\n    \"North_Dakota/Beulah\",\n    \"North_Dakota/Center\",\n    \"North_Dakota/New_Salem\",\n    \"Ojinaga\",\n    \"Panama\",\n    \"Pangnirtung\",\n    \"Paramaribo\",\n    \"Phoenix\",\n    \"Port_of_Spain\",\n    \"Port-au-Prince\",\n    \"Porto_Acre\",\n    \"Porto_Velho\",\n    \"Puerto_Rico\",\n    \"Punta_Arenas\",\n    \"Rainy_River\",\n    \"Rankin_Inlet\",\n    \"Recife\",\n    \"Regina\",\n    \"Resolute\",\n    \"Rio_Branco\",\n    \"Rosario\",\n    \"Santa_Isabel\",\n    \"Santarem\",\n    \"Santiago\",\n    \"Santo_Domingo\",\n    \"Sao_Paulo\",\n    \"Scoresbysund\",\n    \"Shiprock\",\n    \"Sitka\",\n    \"St_Barthelemy\",\n    \"St_Johns\",\n    \"St_Kitts\",\n    \"St_Lucia\",\n    \"St_Thomas\",\n    \"St_Vincent\",\n    \"Swift_Current\",\n    \"Thule\",\n    \"Thunder_Bay\",\n    \"Tijuana\",\n    \"Toronto\",\n    \"Tortola\",\n    \"Vancouver\",\n    \"Virgin\",\n    \"Whitehorse\",\n    \"Winnipeg\",\n    \"Yakutat\",\n    \"Yellowknife\"\n  ],\n  Asia: [\n    \"Aden\",\n    \"Almaty\",\n    \"Amman\",\n    \"Anadyr\",\n    \"Aqtau\",\n    \"Aqtobe\",\n    \"Ashgabat\",\n    \"Ashkhabad\",\n    \"Atyrau\",\n    \"Baghdad\",\n    \"Bahrain\",\n    \"Baku\",\n    \"Bangkok\",\n    \"Barnaul\",\n    \"Beirut\",\n    \"Bishkek\",\n    \"Brunei\",\n    \"Calcutta\",\n    \"Chita\",\n    \"Choibalsan\",\n    \"Chongqing\",\n    \"Chungking\",\n    \"Colombo\",\n    \"Dacca\",\n    \"Damascus\",\n    \"Dhaka\",\n    \"Dili\",\n    \"Dubai\",\n    \"Dushanbe\",\n    \"Famagusta\",\n    \"Gaza\",\n    \"Harbin\",\n    \"Hebron\",\n    \"Ho_Chi_Minh\",\n    \"Hong_Kong\",\n    \"Hovd\",\n    \"Irkutsk\",\n    \"Istanbul\",\n    \"Jakarta\",\n    \"Jayapura\",\n    \"Jerusalem\",\n    \"Kabul\",\n    \"Kamchatka\",\n    \"Karachi\",\n    \"Kashgar\",\n    \"Kathmandu\",\n    \"Katmandu\",\n    \"Khandyga\",\n    \"Kolkata\",\n    \"Krasnoyarsk\",\n    \"Kuala_Lumpur\",\n    \"Kuching\",\n    \"Kuwait\",\n    \"Macao\",\n    \"Macau\",\n    \"Magadan\",\n    \"Makassar\",\n    \"Manila\",\n    \"Muscat\",\n    \"Novokuznetsk\",\n    \"Novosibirsk\",\n    \"Omsk\",\n    \"Oral\",\n    \"Phnom_Penh\",\n    \"Pontianak\",\n    \"Pyongyang\",\n    \"Qatar\",\n    \"Qyzylorda\",\n    \"Rangoon\",\n    \"Riyadh\",\n    \"Saigon\",\n    \"Sakhalin\",\n    \"Samarkand\",\n    \"Seoul\",\n    \"Shanghai\",\n    \"Singapore\",\n    \"Srednekolymsk\",\n    \"Taipei\",\n    \"Tashkent\",\n    \"Tbilisi\",\n    \"Tehran\",\n    \"Tel_Aviv\",\n    \"Thimbu\",\n    \"Thimphu\",\n    \"Tokyo\",\n    \"Tomsk\",\n    \"Ujung_Pandang\",\n    \"Ulaanbaatar\",\n    \"Ulan_Bator\",\n    \"Urumqi\",\n    \"Ust-Nera\",\n    \"Vientiane\",\n    \"Vladivostok\",\n    \"Yakutsk\",\n    \"Yangon\",\n    \"Yekaterinburg\",\n    \"Yerevan\",\n    \"Nicosia\"\n  ],\n  Atlantic: [\n    \"Azores\",\n    \"Bermuda\",\n    \"Canary\",\n    \"Cape_Verde\",\n    \"Faeroe\",\n    \"Faroe\",\n    \"Jan_Mayen\",\n    \"Madeira\",\n    \"Reykjavik\",\n    \"South_Georgia\",\n    \"St_Helena\",\n    \"Stanley\"\n  ],\n  Australia: [\n    \"Adelaide\",\n    \"Brisbane\",\n    \"Broken_Hill\",\n    \"Canberra\",\n    \"Currie\",\n    \"Darwin\",\n    \"Eucla\",\n    \"Hobart\",\n    \"Lindeman\",\n    \"Lord_Howe\",\n    \"Melbourne\",\n    \"North\",\n    \"Perth\",\n    \"Queensland\",\n    \"South\",\n    \"Sydney\",\n    \"Tasmania\",\n    \"Victoria\",\n    \"West\",\n    \"Yancowinna\"\n  ],\n  Brazil: [\"Acre\", \"East\", \"West\"],\n  Canada: [\n    \"Atlantic\",\n    \"Central\",\n    \"Eastern\",\n    \"Mountain\",\n    \"Newfoundland\",\n    \"Pacific\",\n    \"Saskatchewan\",\n    \"Yukon\"\n  ],\n  Europe: [\n    \"Amsterdam\",\n    \"Andorra\",\n    \"Astrakhan\",\n    \"Athens\",\n    \"Belfast\",\n    \"Belgrade\",\n    \"Berlin\",\n    \"Bratislava\",\n    \"Brussels\",\n    \"Bucharest\",\n    \"Budapest\",\n    \"Busingen\",\n    \"Chisinau\",\n    \"Copenhagen\",\n    \"Dublin\",\n    \"Gibraltar\",\n    \"Guernsey\",\n    \"Helsinki\",\n    \"Isle_of_Man\",\n    \"Istanbul\",\n    \"Jersey\",\n    \"Kaliningrad\",\n    \"Kiev\",\n    \"Kirov\",\n    \"Lisbon\",\n    \"Ljubljana\",\n    \"London\",\n    \"Luxembourg\",\n    \"Madrid\",\n    \"Malta\",\n    \"Mariehamn\",\n    \"Minsk\",\n    \"Monaco\",\n    \"Moscow\",\n    \"Oslo\",\n    \"Paris\",\n    \"Podgorica\",\n    \"Prague\",\n    \"Riga\",\n    \"Rome\",\n    \"Samara\",\n    \"San_Marino\",\n    \"Sarajevo\",\n    \"Saratov\",\n    \"Simferopol\",\n    \"Skopje\",\n    \"Sofia\",\n    \"Stockholm\",\n    \"Tallinn\",\n    \"Tirane\",\n    \"Tiraspol\",\n    \"Ulyanovsk\",\n    \"Uzhgorod\",\n    \"Vaduz\",\n    \"Vatican\",\n    \"Vienna\",\n    \"Vilnius\",\n    \"Volgograd\",\n    \"Warsaw\",\n    \"Zagreb\",\n    \"Zaporozhye\",\n    \"Zurich\"\n  ]\n};\n\nconst time = [];\n\nconst filtereddata = all\n  .filter(data => data.includes(\"/\"))\n  .filter(timezone => {\n    try {\n      new Date().toLocaleString(\"en-US\", {\n        timeZone: timezone,\n        hour12: false,\n        weekday: \"long\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      });\n    } catch (error) {\n      // console.log(\"timezone: \", timezone);\n      return false;\n    }\n    return true;\n  });\n\nconst reducedData = filtereddata.reduce((acc, curr) => {\n  const currContinent = curr.substring(0, curr.indexOf(\"/\"));\n  const currCity = curr.substring(curr.indexOf(\"/\") + 1);\n  if (!acc[currContinent]) {\n    acc[currContinent] = [];\n  }\n  if (!acc[currContinent].includes(currCity)) {\n    acc[currContinent].push(currCity);\n  }\n  return acc;\n}, {});\n\nconst data = {\n  America: [\n    \"Adak\",\n    \"Anchorage\",\n    \"Anguilla\",\n    \"Araguaina\",\n    \"Argentina/Buenos_Aires\",\n    \"Argentina/Catamarca\",\n    \"Argentina/Cordoba\",\n    \"Argentina/Jujuy\",\n    \"Argentina/La_Rioja\",\n    \"Argentina/Mendoza\",\n    \"Argentina/Rio_Gallegos\",\n    \"Argentina/Salta\",\n    \"Argentina/San_Juan\",\n    \"Argentina/San_Luis\",\n    \"Argentina/Tucuman\",\n    \"Argentina/Ushuaia\",\n    \"Asuncion\",\n    \"Atikokan\",\n    \"Atka\",\n    \"Bahia\",\n    \"Bahia_Banderas\",\n    \"Barbados\",\n    \"Belem\",\n    \"Blanc-Sablon\",\n    \"Boa_Vista\",\n    \"Bogota\",\n    \"Boise\",\n    \"Buenos_Aires\",\n    \"Cambridge_Bay\",\n    \"Campo_Grande\",\n    \"Cancun\",\n    \"Caracas\",\n    \"Catamarca\",\n    \"Cayenne\",\n    \"Chicago\",\n    \"Chihuahua\",\n    \"Coral_Harbour\",\n    \"Cordoba\",\n    \"Costa_Rica\",\n    \"Creston\",\n    \"Cuiaba\",\n    \"Dawson\",\n    \"Dawson_Creek\",\n    \"Denver\",\n    \"Detroit\",\n    \"Edmonton\",\n    \"Eirunepe\",\n    \"El_Salvador\",\n    \"Ensenada\",\n    \"Fort_Nelson\",\n    \"Fort_Wayne\",\n    \"Fortaleza\",\n    \"Glace_Bay\",\n    \"Godthab\",\n    \"Goose_Bay\",\n    \"Grand_Turk\",\n    \"Guadeloupe\",\n    \"Guatemala\",\n    \"Guayaquil\",\n    \"Halifax\",\n    \"Havana\",\n    \"Hermosillo\",\n    \"Indiana/Indianapolis\",\n    \"Indiana/Knox\",\n    \"Indiana/Marengo\",\n    \"Indiana/Petersburg\",\n    \"Indiana/Tell_City\",\n    \"Indiana/Vevay\",\n    \"Indiana/Vincennes\",\n    \"Indiana/Winamac\",\n    \"Indianapolis\",\n    \"Inuvik\",\n    \"Iqaluit\",\n    \"Jamaica\",\n    \"Jujuy\",\n    \"Juneau\",\n    \"Kentucky/Louisville\",\n    \"Kentucky/Monticello\",\n    \"La_Paz\",\n    \"Lima\",\n    \"Los_Angeles\",\n    \"Louisville\",\n    \"Lower_Princes\",\n    \"Maceio\",\n    \"Manaus\",\n    \"Martinique\",\n    \"Matamoros\",\n    \"Mazatlan\",\n    \"Mendoza\",\n    \"Menominee\",\n    \"Merida\",\n    \"Metlakatla\",\n    \"Mexico_City\",\n    \"Miquelon\",\n    \"Moncton\",\n    \"Monterrey\",\n    \"Montevideo\",\n    \"Montreal\",\n    \"Montserrat\",\n    \"Nassau\",\n    \"New_York\",\n    \"Nipigon\",\n    \"Nome\",\n    \"Noronha\",\n    \"North_Dakota/Beulah\",\n    \"North_Dakota/Center\",\n    \"North_Dakota/New_Salem\",\n    \"Ojinaga\",\n    \"Panama\",\n    \"Pangnirtung\",\n    \"Phoenix\",\n    \"Porto_Acre\",\n    \"Porto_Velho\",\n    \"Puerto_Rico\",\n    \"Punta_Arenas\",\n    \"Rainy_River\",\n    \"Rankin_Inlet\",\n    \"Recife\",\n    \"Regina\",\n    \"Resolute\",\n    \"Rio_Branco\",\n    \"Rosario\",\n    \"Santa_Isabel\",\n    \"Santarem\",\n    \"Santiago\",\n    \"Santo_Domingo\",\n    \"Sao_Paulo\",\n    \"Scoresbysund\",\n    \"Shiprock\",\n    \"St_Barthelemy\",\n    \"St_Johns\",\n    \"St_Kitts\",\n    \"St_Lucia\",\n    \"St_Thomas\",\n    \"St_Vincent\",\n    \"Thule\",\n    \"Thunder_Bay\",\n    \"Tijuana\",\n    \"Toronto\",\n    \"Vancouver\",\n    \"Virgin\",\n    \"Whitehorse\",\n    \"Winnipeg\",\n    \"Yellowknife\"\n  ],\n  Asia: [\n    \"Hong_Kong\",\n    \"Istanbul\",\n    \"Kuala_Lumpur\",\n    \"Macao\",\n    \"Macau\",\n    \"Manila\",\n    \"Singapore\",\n    \"Taipei\",\n    \"Tokyo\"\n  ],\n  Australia: [\"Adelaide\", \"Brisbane\", \"Melbourne\", \"Perth\", \"Sydney\"],\n\n  Europe: [\n    \"Amsterdam\",\n    \"Athens\",\n    \"Belfast\",\n    \"Belgrade\",\n    \"Berlin\",\n    \"Brussels\",\n    \"Budapest\",\n    \"Busingen\",\n    \"Copenhagen\",\n    \"Dublin\",\n    \"Gibraltar\",\n    \"Guernsey\",\n    \"Helsinki\",\n    \"Istanbul\",\n    \"Jersey\",\n    \"Lisbon\",\n    \"London\",\n    \"Luxembourg\",\n    \"Madrid\",\n    \"Malta\",\n    \"Minsk\",\n    \"Monaco\",\n    \"Moscow\",\n    \"Oslo\",\n    \"Paris\",\n    \"Prague\",\n    \"Rome\",\n    \"San_Marino\",\n    \"Stockholm\",\n    \"Vatican\",\n    \"Vienna\",\n    \"Zurich\"\n  ]\n};\n\nexport { all, data, reducedData };\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Autosuggest from \"react-autosuggest\";\nimport Yelp from \"./Yelp\";\nimport ShowTime from \"./ShowTime\";\nimport About from \"./About\";\nimport video from \"./Espresso-Lungo.mp4\";\nimport { data } from \"./timezones\";\n\n//to tell which were deprecated, i foreach of the cities then try, (new date to localstring) each .\n//to tell if the timezone match the yelp, i created a for loop for the timezones of each of the city ,then create a variable isValid which\n//awaits the yelpapi, returns true and\n\n//by default the filter doesn't work with async., for lop around them.\n\n//foreach tekes in a callback which is harder ot do asynchronysly.\n\n// Object.keys(data).forEach(continent => {\n//   const cities = data[continent];\n//   cities.forEach(city => {\n//     try {\n//       new Date().toLocaleString(\"en-US\", {\n//         timeZone: continent + \"/\" + city,\n//         hour12: false,\n//         weekday: \"long\",\n//         month: \"long\",\n//         day: \"numeric\",\n//         hour: \"2-digit\",\n//         minute: \"2-digit\"\n//       });\n//     } catch (error) {\n//       console.log(\"continent/city: \", continent + \"/\" + city);\n//     }\n//   });\n// });\n\n// all.forEach(timezone => {\n//   try {\n//     new Date().toLocaleString(\"en-US\", {\n//       timeZone: timezone,\n//       hour12: false,\n//       weekday: \"long\",\n//       month: \"long\",\n//       day: \"numeric\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\"\n//     });\n//   } catch (error) {\n//     //console.log('timezone: ', timezone);\n//   }\n// });\n\nconst getSuggestionValue = suggestion => suggestion;\n\nconst renderSuggestion = suggestion => (\n  <div> {suggestion.replace(/_/gi, \" \")} </div>\n);\n\nexport default class App extends React.Component {\n  state = {\n    continent: \"America\",\n    selectedContinent: \"America\",\n    city: \"\",\n    citySearch: \"\",\n    data,\n    suggestions: data[\"America\"],\n    selection: [],\n    lat: [],\n    lng: [],\n    center: {\n      lat: [],\n      lng: []\n    },\n    categories: [],\n    time: \"\",\n    timeStamp: \"\"\n  };\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0\n      ? this.state.data[this.state.selectedContinent]\n      : this.state.data[this.state.selectedContinent].filter(\n          city =>\n            city.toLowerCase().slice(0, inputLength) ===\n            inputValue.replace(/ /gi, \"_\")\n        );\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    this.searchResultsRef = React.createRef();\n    this.searchPage = React.createRef();\n  }\n\n  // componentDidMount() {\n  //   const continents = Object.keys(data);\n  //   continents.(async continent => {\n  //     const cities = data[continent];\n\n  //     console.log(\"continent\", await this.filterCitiesThroughYelp(cities));\n\n  //     //data[continent] = await this.filterCitiesThroughYelp(cities);\n\n  //     //console.log(\"continent: \", continent);\n  //     //console.log(\"data[continent]: \", data[continent]);\n  //   });\n  // }\n\n  async componentDidMount() {\n    // const data = {\n    //   America: [\"Shiprock\", \"Toronto\"],\n    //   Asia: [\"Tokyo\", \"Shanghai\"]\n    // };\n    // const filteredData = {};\n    // const continents = Object.keys(data);\n    // for (const continent of continents) {\n    //   filteredData[continent] = [];\n    //   const cities = data[continent];\n    //   for (const city of cities) {\n    //     const isValid = await this.getSelectionfromApi(city, \"dinner\");\n    //     console.log(\n    //       `continent: ${continent}, city: ${city}, isValid: ${isValid}`\n    //     );\n    //     if (isValid) {\n    //       filteredData[continent].push(city);\n    //     }\n    //   }\n    // }\n    // console.log(\"filteredData\", filteredData);\n  }\n\n  timeStamp = (continent, city) => {\n    let x = new Date().toLocaleString(\"en-US\", {\n      timeZone: continent + \"/\" + city,\n      hour12: false,\n      weekday: \"long\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    return x;\n  };\n\n  handleChange = event => {\n    this.setState({\n      citySearch: event.target.value\n    });\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      citySearch: newValue.replace(/ /gi, \"_\")\n    });\n  };\n\n  handleChangeSelect = event => {\n    const value = event.target.value;\n    this.setState(state => ({\n      selectedContinent: value,\n      suggestions: state.data[value]\n    }));\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.setState(\n      state => ({\n        city: state.citySearch,\n        continent: state.selectedContinent\n      }),\n      () => {\n        this.getSelectionfromApi(this.state.city, this.state.time);\n      }\n    );\n  };\n\n  getTime = () => {\n    let x = this.timeStamp(this.state.continent, this.state.city);\n    let y = x.match(/(?:[01]\\d|2[0123]):(?:[012345]\\d)/);\n    let yy = y[0];\n    let yyy = Number(yy.replace(\":\", \"\"));\n    let time = \"\";\n    if (yyy > 0o600 && yyy <= 1200) {\n      time = \"Breakfast\";\n    } else if (yyy > 1200 && yyy < 1700) {\n      time = \"Lunch\";\n    } else {\n      time = \"Dinner\";\n    }\n    this.setState({ time: time, timeStamp: x });\n  };\n\n  getSelectionfromApi = (city, meal) => {\n    return axios\n      .get(\n        `${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?location=` +\n          city,\n        {\n          headers: {\n            Authorization: `Bearer 6HpwezQbGeEEFr-zNNAbretclit-SFBBqV92zLarZ5hOAEmiL-In5gB2ty70Q7YQTRDROV7Oq3zFRxvyX8zeEWiQsj6DGQj2mtblF3ZHyHQk8g-Am3hdv3qG64Y_XHYx`\n          },\n          params: {\n            categories: meal\n          }\n        }\n      )\n      .then(res => {\n        let businesses = res.data.businesses;\n        //console.log(businesses);\n        this.setState({ selection: businesses }, () => {\n          this.getTime();\n          this.getCoordinates(businesses);\n        });\n        this.searchResultsRef.current.scrollIntoView({\n          block: \"nearest\",\n          behavior: \"smooth\"\n        });\n        console.log(res);\n        return true;\n      })\n      .catch(err => {\n        console.log(\"err\", err);\n        return false;\n      });\n  };\n\n  getCoordinates = businesses => {\n    let x = businesses.map(item => {\n      let lat = item.coordinates.latitude;\n      return lat;\n    });\n    let y = businesses.map(item => {\n      let lng = item.coordinates.longitude;\n      return lng;\n    });\n    this.setState(state => ({ lat: x, lng: y }));\n  };\n\n  scroll = () => {\n    this.searchPage.current.scrollIntoView({\n      block: \"nearest\",\n      behavior: \"smooth\"\n    });\n  };\n\n  render() {\n    const { citySearch, suggestions } = this.state;\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Select an area\",\n      value: citySearch.replace(/_/gi, \" \"),\n      onChange: this.onChange\n    };\n\n    return (\n      <>\n        <div id=\"videocontainer\">\n          <video\n            muted\n            autoPlay\n            id=\"video\"\n            loop\n            alt=\"coffee machine brewing coffee onto white cup\"\n          >\n            <source src={video} />\n          </video>\n        </div>\n        <div className=\"hero\">\n          <h1> MealTime </h1>\n        </div>\n        <About scroll={this.scroll} />\n        <div className=\"hero\" id=\"selectionPage\" ref={this.searchPage}>\n          <h1> MealTime </h1>\n          <div className=\"selection\">\n            <form action=\"#\">\n              <select\n                onChange={this.handleChangeSelect}\n                value={this.state.selectedContinent}\n                className=\"react-autosuggest__container\"\n              >\n                {Object.keys(this.state.data).map(continent => (\n                  <option\n                    value={continent}\n                    className=\"react-autosuggest__input \"\n                  >\n                    {continent}\n                  </option>\n                ))}\n              </select>\n              <Autosuggest\n                suggestions={suggestions}\n                shouldRenderSuggestions={() => true}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n              />\n              <input\n                type=\"submit\"\n                value=\"submit\"\n                onClick={this.handleSubmit}\n                disabled={\n                  !this.state.data[this.state.selectedContinent].includes(\n                    this.state.citySearch\n                  )\n                }\n              />\n            </form>\n          </div>\n        </div>\n        <div ref={this.searchResultsRef}>\n          {this.state.city.length > 0 && (\n            <div className=\"searchPage\">\n              <ShowTime\n                time={this.state.time}\n                city={this.state.city.replace(/_/gi, \" \")}\n                timeStamp={this.state.timeStamp}\n              />\n              <Yelp\n                city={this.state.city}\n                getSelectionfromApi={this.getSelectionfromApi}\n                selection={this.state.selection}\n                lat={this.state.lat}\n                lats={this.state.lat}\n                lng={this.state.lat}\n                center={this.state.center}\n              />\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}